<?php
/* 
 * Generated by CRUDigniter v2.0 Beta 
 * www.crudigniter.com
 */
 
class Listing_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * get a listing by id
     */
    function getListingInfoById($id,$userId = null)
    {
        $where = "id = '$id'";
        if($userId != null)
            $where = $where." AND user_id = $userId";
        $this->db->where($where);
        return $this->db->get('listing')->row_array();
    }

    function getListingApi($id,$userId = null)
    {
        $this->db->select("*");
        $this->db->where("id = $id AND user_id = $userId");
        return $this->db->get('listing')->row_array();
    }

    function getListingBySlug($slug)
    {
        $this->db->select("li.*,user.fname");
        $this->db->from("listing as li");
        $this->db->join('user as user', 'user.id = li.user_id');
        $this->db->where("slug = ".$this->db->escape($slug));
        return $this->db->get()->row_array();
    }

    function getListingBySlugApi($slug,$userId)
    {
        $this->db->select("li.*,user.fname");
        $this->db->from("listing as li");
        $this->db->join('user as user', 'user.id = li.user_id');
        $this->db->where("slug = ".$this->db->escape($slug));
        $result = $this->db->get()->row_array();
        $result['is_watchlist'] = $this->checkIsWatchlist($slug,$userId);
        return $result;
    }
    function checkIsWatchlist($slug,$userId)
    {
        $this->db->where("listing_slug = '$slug' AND user_id = '$userId' AND deleted_at IS NULL");
        $result = $this->db->get("watchlist")->row_array();
        if(is_array($result) && !empty($result))
            return 1;
        else
            return 0;
    }
    
    /*
     * function to add new listing
     */
    function addListing($params)
    {
        //echo "<pre>"; print_r($params);die;
        $this->db->insert('listing',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update listing
     */
    function updateListing($id,$params)
    {
        $this->db->where('id',$id);
        $this->db->update('listing',$params);
    }
    
    /*
     * function to delete listing
     */
    function deleteListing($id,$param)
    {
        $this->db->where('id',$id);
        $this->db->update('listing', $param); 
    }

    /*
        this function is used for The Checking slug is already Exist into Database
    */
    function checkSlug($slugName)
    {
        $this->db->where("slug =".$this->db->escape($slugName));
        $result = $this->db->get('listing')->result_array();

        /*
         this condition is checking if slug already exist into database they have to Adding random number 
         before slug
        */

// echo "<pre>"; print_r($result);
        if(!empty($result) && is_array($result))
        {

            $slugName =  $slugName.rand(1,99);
            $slugName = $this->checkSlug($slugName);
            if(!empty($result))
            {
                return $slugName;
            }
            
        }
        else
            return $slugName;
    }

    /*
        this function is return All the Listing Item.
    */
    function getAllListing($start = 0, $lenght = null, $keyword = null, $sort = 'asc')
    {
        $this->db->limit($lenght, $start);       
        $this->db->where("(name LIKE '%$keyword%' OR description LIKE '%$keyword%' OR price LIKE '%$keyword%' OR is_featured LIKE '%$keyword%')");
        $this->db->order_by("id",$sort);
        return $this->db->get('listing')->result_array();
    }

    /*
        This function is used for the insert listing Images
    */
    function addListingImage($params)
    {
        $this->db->insert("listing_image", $params);
    }

    /*
        This function is return all the listing Images for the Current Listing ID
    */
    function getListingImage($id)
    {

        return $this->db->get_where('listing_image',array('listing_id'=>$id))->result_array();
    }    

    /*
        this function is return all the Listing for the Current Login User
    */
    function getListingByUser($userId)
    {
        $this->db->select("li.*,user.fname");
        $this->db->from("listing as li");
        $this->db->join('user as user', 'li.user_id = user.id');
        $this->db->where("li.user_id = '$userId' AND li.deleted_at IS NULL");
        $this->db->order_by("li.is_featured desc");
        return $this->db->get()->result_array();   
    }

    function getListingBySeller($userId)
    {
        $this->db->select("li.*,user.fname,category.name as category_name");
        $this->db->from("listing as li");
        $this->db->join('user as user', 'li.user_id = user.id');
        $this->db->join('category as category', 'category.id = li.category_id');
        $this->db->where("li.user_id = '$userId' AND li.status = 1");
        $this->db->order_by("li.category_id asc");
        return $this->db->get()->result_array();   
    }
    function getListingByUserApi($userId)
    {
        $this->db->select("*");
        $this->db->where("user_id = '$userId' AND deleted_at IS NULL");
        return $this->db->get('listing')->result_array();   
    }
    
    /*
        This function is used for the Remove Image from Database and unlink from the
        server images
    */
    function removeListingImage($imageName)
    {
        $path = "./assets/admin/images/upload_images/".$imageName;
        unlink($path);
        $result = $this->db->delete('listing_image',array('image'=>$imageName));   
        if($result)
            return 'SUCCESS';
        else
            return 'FAIL';
    }
    function getEndDate($planInfo)
    {
            $date = date('Y-m-d');
            if($planInfo['duration_units'] == 'days')
                $endDate = date('Y-m-d',strtotime('+'.$planInfo['duration'].'days'));
            if($planInfo['duration_units'] == 'week')
                $endDate = date('Y-m-d',strtotime('+'.$planInfo['duration'].'week'));
            if($planInfo['duration_units'] == 'month')
                $endDate = date('Y-m-d',strtotime('+'.$planInfo['duration'].'month'));
            if($planInfo['duration_units'] == 'year')
                $endDate = date('Y-m-d',strtotime('+'.$planInfo['duration'].'years'));
            if($planInfo['duration_units'] == 'lifetime')
            {
                $day = date('d');   
                $month = date('m');   
                $year = date('Y') + 50;   
                $endDate = $year.'-'.$month.'-'.$day;
            }
            return $endDate;
    }
    function updateEndDate($planInfo,$CurrentEndDate)
    {
        if($planInfo['duration_units'] == 'days')
            $endDate = date('Y-m-d',strtotime($CurrentEndDate. '+'.$planInfo['duration'].'days'));
        if($planInfo['duration_units'] == 'week')
            $endDate = date('Y-m-d',strtotime($CurrentEndDate. '+'.$planInfo['duration'].'week'));
        if($planInfo['duration_units'] == 'month')
            $endDate = date('Y-m-d',strtotime($CurrentEndDate. '+'.$planInfo['duration'].'month'));
        if($planInfo['duration_units'] == 'year')
            $endDate = date('Y-m-d',strtotime($CurrentEndDate. '+'.$planInfo['duration'].'years'));
        if($planInfo['duration_units'] == 'lifetime')
        {
            $day = date('d');   
            $month = date('m');   
            $year = date('Y') + 50;   
            $endDate = $year.'-'.$month.'-'.$day;
        }
       return $endDate;

    }
    function getAllGender()
    {
      return $this->db->get("gender_category")->result_array();
    }
    function updateListingStatus($listingId,$listingParam)
    {
        $this->db->where("id = '$listingId'");
        $this->db->update("listing",$listingParam);
    }
    function getAllFeaturedListing()
    {
        $currentDate = date('Y-m-d');
        $this->db->select("li.*,cv.value as size");
        $this->db->from("listing as li");
        $this->db->join('custom_fields_user_value as cv', 'li.id = cv.listing_id');
        $this->db->where("li.is_featured = 1 AND (li.feature_end_date > '$currentDate') AND li.status = 1 AND cv.field_id = 1");
        $this->db->order_by('li.id desc');
        return $this->db->get()->result_array();
    }
    function getSimilarProduct($category,$customValue)
    {

        $slug = $this->uri->segment(3);
        $metaKey = '';
        foreach ($customValue as $customKey => $customValue) {
            if(!empty($metaKey))
                $metaKey = $metaKey.','.$customValue['meta_id'];    
            else
                $metaKey = $customValue['meta_id'];    
        }
        $this->db->limit(4,0);
        $this->db->select("li.*,limage.Image as main_Image");
        $this->db->from("listing as li");
        $this->db->group_by("li.id");
        $this->db->order_by("li.id desc");
        $this->db->join('custom_fields_user_value as cv', 'li.id = cv.listing_id');
        $this->db->join('listing_image as limage', 'li.id = limage.listing_id');
        $this->db->join('user as user', 'user.id = li.user_id');
        $where = "li.category_id = '$category[id]' AND li.slug NOT IN ('$slug') AND limage.is_main = 1 AND li.deleted_at IS NULL";
        if(!empty($metaKey))
            $where = $where.'AND cv.meta_id in ('.$metaKey.')';
        $this->db->where($where);
        return $this->db->get()->result_array();
    }
    function getSlugById($listingId)
    {
        $this->db->select('slug');
        $this->db->where("id = '$listingId'");
        return $this->db->get("listing")->row_array();
    }
    function addContactSellerInfo($params)
    {
        return $this->db->insert("contact_seller",$params);
    }
    function getTodayContactSeller($userId,$date)
    {
        $this->db->select("count(id) as count");
        $this->db->where("user_id = '$userId' AND created_at = '$date'");
        return $this->db->get("contact_seller")->row_array();
    }
    function getAllBuyingItem($userId)
    {
        $this->db->select("li.*");
        $this->db->from("listing as li");
        $this->db->group_by('li.slug');
        $this->db->join('contact_seller as cs', 'cs.listing_slug = li.slug');
        $this->db->where("cs.user_id = '$userId' AND cs.deleted_at IS NULL AND li.deleted_at IS NULL");
        return $this->db->get()->result_array();
    }
   function getAllWatchlist($userId)
   {
        $this->db->distinct();
        // $this->db->select("li.slug");
        $this->db->from("listing as li");
        $this->db->group_by('li.slug');
        $this->db->join('watchlist as wl', 'wl.listing_slug = li.slug');
        $this->db->where("wl.user_id = '$userId' AND wl.deleted_at IS NULL");
        return $this->db->get()->result_array();
   }
   function removeBuyingItem($userId,$slug)
   {
        $param = array(
            'deleted_at' => date('Y-m-d H:i:s')
        );
        $this->db->where("user_id = '$userId' AND listing_slug = '$slug'");
        $this->db->update("contact_seller",$param);
   }
   function removeWatchlistItem($userId,$slug)
   {
        $param = array(
                'deleted_at' => date('Y-m-d H:i:s')
            );
        $this->db->where("user_id = '$userId' AND listing_slug = '$slug'");
        $this->db->update("watchlist",$param);
   }
   function getListingByStatus($userId,$status)
   {
        $this->db->where("user_id = '$userId' AND status = '$status' AND deleted_at IS NULL");
        return $this->db->get("listing")->result_array();
   }
   function removeAllImageByListingId($id)
   {
        $this->db->where("listing_id = '$id'");
        $result = $this->db->get("listing_image")->result_array();
        foreach ($result as $key => $value) {
            $imageName = $value['Image'];
            $path = "./assets/admin/images/upload_images/".$imageName;
            unlink($path);
            $result = $this->db->delete('listing_image',array('image'=>$imageName));   
        }
   }
   function getListingImage_api($id)
   {
       $this->db->where("listing_id = '$id'");
       return $this->db->get("listing_image")->result_array();
   }

   function updateDefaultIsMain($id)
   {
        $this->db->set('is_main', '1');
        $this->db->where("listing_id = '$id'");
        return $this->db->update('listing_image');
   }
}
